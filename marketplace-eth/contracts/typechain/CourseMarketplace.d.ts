/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface CourseMarketplaceInterface extends ethers.utils.Interface {
  functions: {
    "a()": FunctionFragment;
    "activateCourse(bytes32)": FunctionFragment;
    "deactivateCourse(bytes32)": FunctionFragment;
    "emergencyWithdraw()": FunctionFragment;
    "getContractOwner()": FunctionFragment;
    "getCourseByHash(bytes32)": FunctionFragment;
    "getCourseCount()": FunctionFragment;
    "getCourseHashAtIndex(uint256)": FunctionFragment;
    "isStopped()": FunctionFragment;
    "purchaseCourse(bytes16,bytes32)": FunctionFragment;
    "repurchaseCourse(bytes32)": FunctionFragment;
    "resumeContract()": FunctionFragment;
    "selfDestruct()": FunctionFragment;
    "stopContract()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "a", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "activateCourse",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deactivateCourse",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContractOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCourseByHash",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCourseCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCourseHashAtIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "isStopped", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "purchaseCourse",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "repurchaseCourse",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "resumeContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "selfDestruct",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stopContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "a", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "activateCourse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deactivateCourse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCourseByHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCourseCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCourseHashAtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isStopped", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "purchaseCourse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "repurchaseCourse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resumeContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "selfDestruct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stopContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {};
}

export class CourseMarketplace extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: CourseMarketplaceInterface;

  functions: {
    a(overrides?: CallOverrides): Promise<[BigNumber]>;

    activateCourse(
      courseHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deactivateCourse(
      courseHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    emergencyWithdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getContractOwner(overrides?: CallOverrides): Promise<[string]>;

    getCourseByHash(
      courseHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, string, string, number] & {
          id: BigNumber;
          price: BigNumber;
          proof: string;
          owner: string;
          state: number;
        }
      ]
    >;

    getCourseCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCourseHashAtIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isStopped(overrides?: CallOverrides): Promise<[boolean]>;

    purchaseCourse(
      courseId: BytesLike,
      proof: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    repurchaseCourse(
      courseHash: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    resumeContract(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    selfDestruct(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stopContract(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  a(overrides?: CallOverrides): Promise<BigNumber>;

  activateCourse(
    courseHash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deactivateCourse(
    courseHash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  emergencyWithdraw(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getContractOwner(overrides?: CallOverrides): Promise<string>;

  getCourseByHash(
    courseHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string, string, number] & {
      id: BigNumber;
      price: BigNumber;
      proof: string;
      owner: string;
      state: number;
    }
  >;

  getCourseCount(overrides?: CallOverrides): Promise<BigNumber>;

  getCourseHashAtIndex(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  isStopped(overrides?: CallOverrides): Promise<boolean>;

  purchaseCourse(
    courseId: BytesLike,
    proof: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  repurchaseCourse(
    courseHash: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  resumeContract(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  selfDestruct(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stopContract(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    a(overrides?: CallOverrides): Promise<BigNumber>;

    activateCourse(
      courseHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    deactivateCourse(
      courseHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    emergencyWithdraw(overrides?: CallOverrides): Promise<void>;

    getContractOwner(overrides?: CallOverrides): Promise<string>;

    getCourseByHash(
      courseHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, string, number] & {
        id: BigNumber;
        price: BigNumber;
        proof: string;
        owner: string;
        state: number;
      }
    >;

    getCourseCount(overrides?: CallOverrides): Promise<BigNumber>;

    getCourseHashAtIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    isStopped(overrides?: CallOverrides): Promise<boolean>;

    purchaseCourse(
      courseId: BytesLike,
      proof: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    repurchaseCourse(
      courseHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    resumeContract(overrides?: CallOverrides): Promise<void>;

    selfDestruct(overrides?: CallOverrides): Promise<void>;

    stopContract(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    a(overrides?: CallOverrides): Promise<BigNumber>;

    activateCourse(
      courseHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deactivateCourse(
      courseHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    emergencyWithdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getContractOwner(overrides?: CallOverrides): Promise<BigNumber>;

    getCourseByHash(
      courseHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCourseCount(overrides?: CallOverrides): Promise<BigNumber>;

    getCourseHashAtIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isStopped(overrides?: CallOverrides): Promise<BigNumber>;

    purchaseCourse(
      courseId: BytesLike,
      proof: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    repurchaseCourse(
      courseHash: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    resumeContract(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    selfDestruct(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stopContract(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    a(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    activateCourse(
      courseHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deactivateCourse(
      courseHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getContractOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCourseByHash(
      courseHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCourseCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCourseHashAtIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isStopped(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    purchaseCourse(
      courseId: BytesLike,
      proof: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    repurchaseCourse(
      courseHash: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    resumeContract(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    selfDestruct(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stopContract(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
